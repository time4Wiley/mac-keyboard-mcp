name: Continuous Verification

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at midnight UTC
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      verification_level:
        description: 'Verification level'
        required: true
        default: 'quick'
        type: choice
        options:
          - quick
          - full
          - performance

jobs:
  verify-macos:
    name: Verify on macOS
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r scripts/requirements.txt || echo "No requirements.txt found"
    
    # Stage 1: Code Quality
    - name: Code formatting check
      run: cargo fmt -- --check
      
    - name: Clippy analysis
      run: cargo clippy -- -D warnings
    
    # Stage 2: Build verification
    - name: Build check
      run: cargo check --all-features
      
    - name: Build release
      run: cargo build --release
    
    # Stage 3: Test execution
    - name: Run unit tests
      run: cargo test --lib
      
    - name: Run integration tests
      run: cargo test --test '*'
    
    # Stage 4: Data verification
    - name: Verify key codes (quick)
      run: |
        cd scripts
        python verify_keycodes.py --mode quick --report
      
    - name: Upload key verification report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: keycode-verification-report
        path: scripts/verification_report.json
    
    # Stage 5: Performance check
    - name: Performance benchmark
      if: github.event_name == 'push' || inputs.verification_level == 'performance'
      run: |
        cargo build --release
        time ./target/release/mac-keyboard-mcp --version
    
    # Stage 6: MCP compliance check
    - name: MCP protocol compliance
      run: |
        # Start server in background
        ./target/release/mac-keyboard-mcp &
        SERVER_PID=$!
        
        # Give server time to start
        sleep 2
        
        # Basic protocol test
        echo '{"jsonrpc":"2.0","method":"list_tools","id":1}' | nc localhost 3000 || true
        
        # Kill server
        kill $SERVER_PID || true
    
    # Generate comprehensive report
    - name: Generate verification report
      if: always()
      run: |
        ./scripts/continuous_verify.sh || true
    
    - name: Upload verification reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: verification-reports-${{ github.run_number }}
        path: verification_reports/
        retention-days: 30
    
    # Post results as PR comment
    - name: Comment PR with results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const reportPath = 'verification_reports/';
          
          // Find the latest report
          const files = fs.readdirSync(reportPath);
          const latestReport = files.sort().reverse()[0];
          
          if (latestReport) {
            const report = JSON.parse(fs.readFileSync(`${reportPath}/${latestReport}`, 'utf8'));
            const passed = report.summary.all_passed;
            
            const comment = `## üîç Verification Results
            
            ${passed ? '‚úÖ **All checks passed!**' : '‚ùå **Some checks failed**'}
            
            | Stage | Status |
            |-------|--------|
            | Build | ${report.stages.build.cargo_check} |
            | Data | ${report.stages.data.quick_verify} |
            | Unit Tests | ${report.stages.tests.unit} |
            | Integration | ${report.stages.tests.integration} |
            | Performance | ${report.stages.performance.status} |
            
            [View full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  # Human verification checklist (manual job)
  human-verification:
    name: Human Verification Checklist
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create verification issue
      uses: actions/github-script@v6
      with:
        script: |
          const title = `Human Verification Required - ${new Date().toISOString().split('T')[0]}`;
          
          const body = `## Human Verification Checklist
          
          Please complete the following manual verification steps:
          
          ### Stage 1: Visual Testing
          - [ ] Key codes produce correct output in Script Editor
          - [ ] Modifier combinations work correctly
          - [ ] Special keys (Space, Tab, Return) work
          
          ### Stage 2: API Testing
          - [ ] MCP server responds to all tools
          - [ ] Error messages are helpful
          - [ ] Fuzzy search provides good suggestions
          
          ### Stage 3: User Experience
          - [ ] Installation process is smooth
          - [ ] Documentation is clear
          - [ ] Examples work as shown
          
          ### Stage 4: Performance
          - [ ] Response time feels instant
          - [ ] No memory leaks observed
          - [ ] Handles rapid requests
          
          ### Notes
          _Add any observations or issues here_
          
          ### Sign-off
          - [ ] Ready for release
          
          cc @${context.actor}`;
          
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['verification', 'human-review']
          });
          
          console.log(`Created issue #${issue.data.number}`);

  # Summary job
  verification-summary:
    name: Verification Summary
    runs-on: ubuntu-latest
    needs: [verify-macos]
    if: always()
    
    steps:
    - name: Check results
      run: |
        if [ "${{ needs.verify-macos.result }}" == "success" ]; then
          echo "‚úÖ All automated checks passed!"
        else
          echo "‚ùå Some checks failed"
          exit 1
        fi